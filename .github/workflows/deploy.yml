name: Deploy to GitHub Pages

on:
  # Trigger the workflow every time you push to the `main` branch
  # Using a different branch name? Replace `main` with your branchâ€™s name
  push:
    branches: [main]
  # Allows you to run this workflow manually from the Actions tab on GitHub.
  workflow_dispatch:

  # Grant GITHUB_TOKEN the permissions required to make a Pages deployment
permissions:
  pages: write # to deploy to Pages
  id-token: write # to verify the deployment originates from an appropriate source
  actions: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout your repository using git
        uses: actions/checkout@v4

      - name: Check lockfiles
        shell: "bash"
        working-directory: "."
        env:
          INPUT_PM: ""
        run: |
          len=`echo $INPUT_PM | wc -c`
          if [ $len -gt 1 ]; then
            PACKAGE_MANAGER=$(echo "$INPUT_PM" | grep -o '^[^@]*')
            VERSION=$(echo "$INPUT_PM" | grep -o '@.*' | sed 's/^@//')
            # Set default VERSION if not provided
            if [ -z "$VERSION" ]; then
                VERSION="latest"
            fi
            echo "PACKAGE_MANAGER=$PACKAGE_MANAGER" >> $GITHUB_ENV
          elif [ $(find "." -name "pnpm-lock.yaml") ]; then
              echo "PACKAGE_MANAGER=pnpm" >> $GITHUB_ENV
              echo "LOCKFILE=pnpm-lock.yaml" >> $GITHUB_ENV
          elif [ $(find "." -name "yarn.lock") ]; then 
              echo "PACKAGE_MANAGER=yarn" >> $GITHUB_ENV
              echo "LOCKFILE=yarn.lock" >> $GITHUB_ENV
          elif [ $(find "." -name "package-lock.json") ]; then 
              VERSION="latest"
              echo "PACKAGE_MANAGER=npm" >> $GITHUB_ENV
              echo "LOCKFILE=package-lock.json" >> $GITHUB_ENV
          elif [ $(find "." -name "bun.lockb") ]; then 
              VERSION="latest"
              echo "PACKAGE_MANAGER=bun" >> $GITHUB_ENV
              echo "LOCKFILE=bun.lockb" >> $GITHUB_ENV
          else
              echo "No lockfile found.
          Please specify your preferred \"package-manager\" in the action configuration."
              exit 1
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
      - name: Setup PNPM
        if: ${{ env.PACKAGE_MANAGER == 'pnpm' }}
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.VERSION }}
      - name: Setup Bun
        if: ${{ env.PACKAGE_MANAGER == 'bun' }}
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.VERSION }}
      - name: Setup Node
        uses: actions/setup-node@v4
        if: ${{ env.PACKAGE_MANAGER != 'bun' }}
        with:
          node-version: 20
          cache: ${{ env.PACKAGE_MANAGER }}
          cache-dependency-path: "${{ inputs.path }}/${{ env.LOCKFILE }}"
      - name: Setup Node (Bun)
        uses: actions/setup-node@v4
        if: ${{ env.PACKAGE_MANAGER == 'bun' }}
        with:
          node-version: 20

      - name: Install
        shell: "bash"
        working-directory: "."
        run: $PACKAGE_MANAGER install

      - name: Build
        shell: "bash"
        working-directory: "."
        run: $PACKAGE_MANAGER run build

      - name: Upload Pages Artifact
        uses: actions/upload-pages-artifact@v3
        with:
          name: production-files
          path: "./dist/"

      # - name: Install, build, and upload your site
      #   uses: withastro/action@v2
      # with:
      # path: . # The root location of your Astro project inside the repository. (optional)
      # node-version: 20 # The specific version of Node that should be used to build your site. Defaults to 20. (optional)
      # package-manager: pnpm@latest # The Node package manager that should be used to install dependencies and build your site. Automatically detected based on your lockfile. (optional)

  deploy:
    needs: build
    if: github.ref == 'refs/heads/main'

    # Deploy to the github-pages environment
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    # Specify runner + deployment step
    runs-on: ubuntu-latest

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: production-files
          path: ./dist

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./dist
